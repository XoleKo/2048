package com.XoleKo.Game2048;

import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.XoleKo.Graphics.Renderer;
import com.XoleKo.Graphics.Sprite;
import com.XoleKo.Main2048.Main;
import com.XoleKo.GameObject.GameObject;
import com.XoleKo.input.Keyboard;

public class Game {

	public static List<GameObject> objects;
	
	public static boolean moving = false, hasMoved = true, somethingIsMoving = false;
	public static int     dir = 0;
	
	private Random rand = new Random();
	
	public Game() {
		init();
	}

	public void init() {
		objects = new ArrayList<GameObject>();
		moving = false;
		hasMoved = true;
		somethingIsMoving = false;
		spawn();
	}
	


	public void update() {
		/* In case you want to restart the game */
		if(Keyboard.keyUp(KeyEvent.VK_R)) {
			init();
		}
		
		for(int i = 0; i < objects.size(); i++) {
			objects.get(i).update();
		}
		
		checkForValueIncrease();
		
		movingLogic();
//		if(Keyboard.keyDown(KeyEvent.VK_A)) {
//			System.out.println("Down A");;
//		}
//		
//		if(Keyboard.key(KeyEvent.VK_A)) {
//			System.out.println("A");;
//		}
//		
//		if(Keyboard.keyUp(KeyEvent.VK_A)) {
//			System.out.println("Up A");;
//		}
	}
	
	private void checkForValueIncrease() {
		for(int i = 0; i < objects.size(); i++) {
			for(int j = 0; j < objects.size(); j++) {
				if(i == j ) continue;
				if(objects.get(i).x == objects.get(j).x && objects.get(j).y == objects.get(j).y) {
					objects.get(j).remove = true;
					objects.get(i).value *= 2;
					objects.get(i).createSprite();
				}
			}
		}
		
		for(int i = 0; i < objects.size(); i++) {
			if(objects.get(i).remove) objects.remove(i);
		}
	}

	
	private void spawn() {
		
	}
	
	private void movingLogic() {
		somethingIsMoving = false;
	}

	public void render() {
		Renderer.renderBackground();
		
		Renderer.renderSprite(new Sprite(100, 100, 0xffffff00), 100, 100);
		
		for(int i = 0; i < Main.pixels.length; i++) {
			Main.pixels[i] = Renderer.pixels[i];
		}
	}

	public void renderText(Graphics2D g) {

	}
}
